// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TileCacheService.Data;

namespace TileCacheService.Data.Migrations
{
    [DbContext(typeof(TileCacheServiceContext))]
    partial class TileCacheServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("SpatialFocus.EntityFrameworkCore.Extensions.EnumLookup<TileCacheService.Shared.Enums.MapTypeEnum>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_map_type_enum");

                    b.HasAlternateKey("Value")
                        .HasName("ak_map_type_enum_value");

                    b.ToTable("map_type_enum");

                    b.HasData(
                        new { Id = 1, Name = "Aerial", Value = 1 },
                        new { Id = 2, Name = "Road", Value = 2 },
                        new { Id = 3, Name = "Terrain", Value = 3 },
                        new { Id = 4, Name = "Hybrid", Value = 4 },
                        new { Id = 5, Name = "Other", Value = 5 }
                    );
                });

            modelBuilder.Entity("TileCacheService.Data.Entities.TileCache", b =>
                {
                    b.Property<Guid>("TileCacheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tile_cache_id");

                    b.Property<string>("Bbox")
                        .HasColumnName("bbox");

                    b.Property<string>("Filename")
                        .HasColumnName("filename");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<DateTime?>("ProcessingFinished")
                        .HasColumnName("processing_finished");

                    b.Property<DateTime?>("ProcessingStarted")
                        .HasColumnName("processing_started");

                    b.Property<Guid>("TileSourceId")
                        .HasColumnName("tile_source_id");

                    b.Property<int>("ZoomLevelMax")
                        .HasColumnName("zoom_level_max");

                    b.Property<int?>("ZoomLevelMin")
                        .HasColumnName("zoom_level_min");

                    b.HasKey("TileCacheId")
                        .HasName("pk_tile_caches");

                    b.HasIndex("TileSourceId")
                        .HasName("ix_tile_caches_tile_source_id");

                    b.ToTable("tile_caches");
                });

            modelBuilder.Entity("TileCacheService.Data.Entities.TileServerUrl", b =>
                {
                    b.Property<int>("TileServerUrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tile_server_url_id");

                    b.Property<Guid>("TileSourceId")
                        .HasColumnName("tile_source_id");

                    b.Property<string>("Url")
                        .HasColumnName("url");

                    b.HasKey("TileServerUrlId")
                        .HasName("pk_tile_server_url");

                    b.HasIndex("TileSourceId")
                        .HasName("ix_tile_server_url_tile_source_id");

                    b.ToTable("tile_server_url");

                    b.HasData(
                        new { TileServerUrlId = 1, TileSourceId = new Guid("f9168c5e-ceb2-4aaa-b6bf-329bf39fa1e4"), Url = "http://maps.wien.gv.at/basemap/bmaporthofoto30cm/normal/google3857/{0}/{2}/{1}.jpg" },
                        new { TileServerUrlId = 2, TileSourceId = new Guid("f9168c5e-ceb2-4aaa-b6bf-329bf39fa1e4"), Url = "http://maps1.wien.gv.at/basemap/bmaporthofoto30cm/normal/google3857/{0}/{2}/{1}.jpg" },
                        new { TileServerUrlId = 3, TileSourceId = new Guid("f9168c5e-ceb2-4aaa-b6bf-329bf39fa1e4"), Url = "http://maps2.wien.gv.at/basemap/bmaporthofoto30cm/normal/google3857/{0}/{2}/{1}.jpg" },
                        new { TileServerUrlId = 4, TileSourceId = new Guid("f9168c5e-ceb2-4aaa-b6bf-329bf39fa1e4"), Url = "http://maps3.wien.gv.at/basemap/bmaporthofoto30cm/normal/google3857/{0}/{2}/{1}.jpg" },
                        new { TileServerUrlId = 5, TileSourceId = new Guid("f9168c5e-ceb2-4aaa-b6bf-329bf39fa1e4"), Url = "http://maps4.wien.gv.at/basemap/bmaporthofoto30cm/normal/google3857/{0}/{2}/{1}.jpg" },
                        new { TileServerUrlId = 6, TileSourceId = new Guid("4a91da65-c466-4d88-ace2-b4ff49d44d3c"), Url = "https://a.tile.openstreetmap.org/{0}/{1}/{2}.png" },
                        new { TileServerUrlId = 7, TileSourceId = new Guid("4a91da65-c466-4d88-ace2-b4ff49d44d3c"), Url = "https://b.tile.openstreetmap.org/{0}/{1}/{2}.png" },
                        new { TileServerUrlId = 8, TileSourceId = new Guid("4a91da65-c466-4d88-ace2-b4ff49d44d3c"), Url = "https://c.tile.openstreetmap.org/{0}/{1}/{2}.png" }
                    );
                });

            modelBuilder.Entity("TileCacheService.Data.Entities.TileSource", b =>
                {
                    b.Property<Guid>("TileSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tile_source_id");

                    b.Property<bool>("AllowHiDefStitching")
                        .HasColumnName("allow_hi_def_stitching");

                    b.Property<string>("Bbox")
                        .HasColumnName("bbox");

                    b.Property<int>("MapType")
                        .HasColumnName("map_type");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("ZoomLevelMax")
                        .HasColumnName("zoom_level_max");

                    b.HasKey("TileSourceId")
                        .HasName("pk_tile_sources");

                    b.HasIndex("MapType")
                        .HasName("ix_tile_sources_map_type");

                    b.ToTable("tile_sources");

                    b.HasData(
                        new { TileSourceId = new Guid("f9168c5e-ceb2-4aaa-b6bf-329bf39fa1e4"), AllowHiDefStitching = true, Bbox = "POLYGON((8.782379 46.358770, 8.782379 49.037872, 17.5 49.037872, 17.5 46.358770, 8.782379 46.358770))", MapType = 1, Name = "basemap.at orthofoto30cm", ZoomLevelMax = 20 },
                        new { TileSourceId = new Guid("4a91da65-c466-4d88-ace2-b4ff49d44d3c"), AllowHiDefStitching = false, Bbox = "POLYGON((-180 -90, 180 -90, 180 90, -180 90, -180 -90))", MapType = 2, Name = "OpenStreetMap Standard layer", ZoomLevelMax = 20 }
                    );
                });

            modelBuilder.Entity("TileCacheService.Data.Entities.TileCache", b =>
                {
                    b.HasOne("TileCacheService.Data.Entities.TileSource", "TileSource")
                        .WithMany()
                        .HasForeignKey("TileSourceId")
                        .HasConstraintName("fk_tile_caches_tile_sources_tile_source_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TileCacheService.Data.Entities.TileServerUrl", b =>
                {
                    b.HasOne("TileCacheService.Data.Entities.TileSource", "TileSource")
                        .WithMany("TileServerUrls")
                        .HasForeignKey("TileSourceId")
                        .HasConstraintName("fk_tile_server_url_tile_sources_tile_source_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TileCacheService.Data.Entities.TileSource", b =>
                {
                    b.HasOne("SpatialFocus.EntityFrameworkCore.Extensions.EnumLookup<TileCacheService.Shared.Enums.MapTypeEnum>")
                        .WithMany()
                        .HasForeignKey("MapType")
                        .HasConstraintName("fk_tile_sources_map_type_enum_map_type")
                        .HasPrincipalKey("Value")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
